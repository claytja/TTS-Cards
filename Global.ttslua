function onLoad(save)
    objectLockdown = {
        "f73eb4","140320","f476b8","17f289","c9a1ab","7fd288","802616","eb7c74",
        "21b5d2","a4df4c","1cffbc","e13ffd","de075e","4e5bd5","677d99","d8141f",
        "ed19b2","2adab0","b29774","5dff41","327c73","077736","6ee035","c382c1",
        "f4e4fc","7b997f","4c68cc","223061","42edd3","5b13c1","26b7c8","b8f2bb",
        "7bb674","8722e0","4ef0c4","257fd3","e08dc1","df996a","b17957","bc494b",
        "29677c","2612c0","7c63f0","e71bd6","c12205","54a40d","11974a","1f8690",

        "084f05","c3da13","7c14e7","ff9b4f",

        "9fdea2",

		"0dc414","ded49d","dc3aff","c42232","a506f9","423aeb",
    }
    -- Hand_Sorter
    Hand_Sorter = {"7c14e7","ff9b4f"}
    ace = 15 -- Ace value
    offset = {6,1,0}
    for i,id in ipairs(Hand_Sorter) do
        getObjectFromGUID(id).createButton({
            label="Suits", click_function="StartSortS", function_owner=self,
            position={-1.5,0.19,0}, rotation={0,0,0}, width=600, height=450, font_size=200
        })
        getObjectFromGUID(id).createButton({
            label="Numbers", click_function="StartSortN", function_owner=self,
            position={0,0.19,0}, rotation={0,0,0}, width=800, height=450, font_size=200
        })

        getObjectFromGUID(id).createButton({
            label="Ace:H", click_function="AceToggle", function_owner=self,
            position={1.5,0.19,0}, rotation={0,0,0}, width=600, height=450, font_size=200
        })
    end
    -- Hand_Sorter end
	Order = {
		{color="White",Obj=getObjectFromGUID("0dc414")},
		{color="Red",Obj=getObjectFromGUID("ded49d")},
		{color="Yellow",Obj=getObjectFromGUID("dc3aff")},
		{color="Green",Obj=getObjectFromGUID("c42232")},
		{color="Blue",Obj=getObjectFromGUID("a506f9")},
		{color="Pink",Obj=getObjectFromGUID("423aeb")},
	}
	if save ~= "" then
		local tbl = JSON.decode(save)
		Index = tbl[1]
		Turn = tbl[2]
	else
		Index = 0
		Turn = "Off"
	end
    lockObjects()
	UpdateDesplay()
	Mods = {}
   normaldeckbagguids = {"7882de"} --all infinite bags that hold default decks. Need to be labeled the same as portal deck.
   normaldeckbags = {}
   for i,v in pairs(normaldeckbagguids) do
      table.insert(normaldeckbags,getObjectFromGUID(v))
   end
   Rzone = getObjectFromGUID("11b50e")
   Wzone = getObjectFromGUID("d72560")
   Gzone = getObjectFromGUID("c28f42")
   RzoneCards = {}
   WzoneCards = {}
   GzoneCards = {}
   timerTick = 0
end

--Hand_Sorter functions
function AceToggle()
    if ace == 1 then
        ace = 15
        for i,id in ipairs(Hand_Sorter) do
            getObjectFromGUID(id).editButton({index=2,label="Ace:H"})
        end
    else
        ace = 1
        for i,id in ipairs(Hand_Sorter) do
            getObjectFromGUID(id).editButton({index=2,label="Ace:L"})
        end
    end
end

function SetAce(mode) --true = high
    if mode[1] == true then
        ace = 15
        for i,id in ipairs(Hand_Sorter) do
            getObjectFromGUID(id).editButton({index=2,label="Ace:H"})
        end
    else
        ace = 1
        for i,id in ipairs(Hand_Sorter) do
            getObjectFromGUID(id).editButton({index=2,label="Ace:L"})
        end
    end
end

function autoS(tbl)
    StartSortS(self,tbl[1])
end

function autoN(tbl)
    StartSortN(self,tbl[1])
end

function StartSortN(o,color)
    function PassInfo()
        Sort(color,true)
        return 1
    end
    startLuaCoroutine(self,"PassInfo")
end

function StartSortS(o,color)
    function PassInfo()
        Sort(color,false)
        return 1
    end
    startLuaCoroutine(self,"PassInfo")
end

function Sort(color,mode)
    local hand = {}
    local cards = Player[color].getHandObjects()
    local rot = Player[color].getHandTransform(1).rotation
    rot.y = rot.y + 180
    for i, card in ipairs(cards) do
        local Split = stringSplit(card.getDescription(), "%S+")
        if mode == false then -- mode suit
            if Split[1] == "A" then
                local num = ace + (tonumber(Split[2])*100)
                table.insert(hand,{num,card.guid})
            else
                local num = tonumber(Split[1]) + (tonumber(Split[2])*100)
                table.insert(hand,{num,card.guid})
            end
        else --mode number
            if Split[1] == "A" then
                local num = (ace*100) + tonumber(Split[2])
                table.insert(hand,{num,card.guid})
            else
                local num = (tonumber(Split[1])*100) + tonumber(Split[2])
                table.insert(hand,{num,card.guid})
            end
        end
    end
    local keys = {}
    for k in pairs(hand) do table.insert(keys, k) end
    table.sort(keys, function(a, b) return hand[a][1] > hand[b][1] end)
    local sorted = {}
    for _, k in ipairs(keys) do table.insert(sorted, {hand[k][2]}) end

    for i, id in ipairs(reverseTable(sorted)) do
        local obj = getObjectFromGUID(id[1])
        waitFrames(1)
        obj.setRotation(rot)
        obj.setPosition(rotateLocalCoordinates(offset,color))
    end
end
--Hand_Sorter end

function onPlayerChangedColor(col) --TEMPFUNCTION
   if col == "Grey" then
      return
   end
   local id = tostring(Player[col].steam_id)
   if id == "76561198041312957" or id == "76561198040185465" then
      broadcastToAll("Player " .. Player[col].steam_name .. " has been promoted\nbecause he/she is a developer.",{1,0,0})
      Player[col].promote()
   end
end

function onSave()
	local tbl = {Index,Turn}
	return JSON.encode(tbl)
end

function lockObjects()
	for i, list in ipairs(objectLockdown) do
		getObjectFromGUID(list).interactable = false
	end
end

function Reset()
	Index = 0
	Turn = "Off"
	UpdateDesplay()
	if #Mods > 0 then
		for i,Obj in ipairs(Mods) do
		Obj.call("Reset",{})
		end
	end
end

function RegisterMod(tbl)
	table.insert(Mods,getObjectFromGUID(tbl[1]))
	print("Registerd: " .. getObjectFromGUID(tbl[1]).getName())
end

-- Turn system
function SetTurn(tbl) -- tbl[1] = color
	for i,set in ipairs(Order) do
		if set.color == tbl[1] then
			Index = i
			Turn = set.color
			UpdateDesplay()
            return Turn
		end
	end
end

function NextPlayer(tbl) --tbl[1] = true/false
	if tbl[1] == true then
		Index = Index -1
		if Index <= 0 then
			Index = #Order
		end
		Turn = Order[Index].color
		if Player[Turn].seated == false then
			NextPlayer(tbl)
			return
		end
		UpdateDesplay()
	else
		Index = Index +1
		if Index > #Order then
			Index = 1
		end
		Turn = Order[Index].color
		if Player[Turn].seated == false then
			NextPlayer(tbl)
			return
		end
		UpdateDesplay()
	end
	broadcastToAll("It's " .. Player[Turn].steam_name .. " turn.",stringColorToRGB(Turn))
    return Turn
end

function UpdateDesplay()
	for i,set in ipairs(Order) do
		if Index == i then
			set.Obj.setColorTint(stringColorToRGB(set.color))
		else
			set.Obj.setColorTint({0,0,0})
		end
	end
end
--Turn system End

--Tools
function delayedCallback(fname,params,delay)
    timerTick = timerTick + 1
    params.id = ('timer_global' .. timerTick)
    Timer.create({identifier=params.id,function_owner=self, function_name=fname, parameters=params, delay=delay})
    return params.id
end
function stringSplit(s, pattern)
    local t = {}
    for i in string.gmatch(s, pattern) do
        table.insert(t, i)
    end
    return t
end
function waitFrames(frames)
    while frames > 0 do
    coroutine.yield(0)
    frames = frames - 1
    end
end
function reverseTable(table)
	local length = #table
	local reverse = {}
	for i, v in ipairs(table) do
		reverse[length + 1 - i] = v
	end
	return reverse
end
function rotateLocalCoordinates(desiredPos,color)
    local objPos, objRot = Player[color].getHandTransform().position, Player[color].getHandTransform().rotation
    local angle = -math.rad(objRot.y)
	local x = desiredPos[1] * math.cos(angle) - desiredPos[3] * math.sin(angle)
	local z = desiredPos[1] * math.sin(angle) + desiredPos[3] * math.cos(angle)
	return {objPos.x+x, objPos.y+desiredPos[2], objPos.z+z} --Baced on handzones
end
