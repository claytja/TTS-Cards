function SendReset()
   Global.call("Reset",{})
end
function onSave()
   return JSON.encode(Sets)
end
function onload(save)
    --Setup
   Global.call("RegisterMod",{self.guid})
   if save ~= "" then
       Sets = {
           {color="Settings",
               Running=false,
               Trot=false, --Trot = true == Counterclockwise
               PluseStack=0, --Current Stack of Pluse 2/4
               CurrentColor=0, --Color ID of Card to play on.
               CurrentNumber=0, --Number ID of Card to play on.
               LastColor=0, --Color ID of Card b4 Current / Used for chalanging Wiled+4
               LastNumber=0,--Number ID of Card b4 Current / Used for chalanging Wiled+4
               LastPlayer="White", --Last Player / Used for chalanging Wiled+4
               --Options
               PluseForLimit=true, --If true may only play a +4 if its the last option
               StackingPluse=false,--May stack +2 and +4 to keep going
               StackingAll=false,  --May also stack skip and reverse
               DrawTillGood=false, --If true Draw till you get a playable card
               ForcePlay=false,    --Prevent players from drawing if thay have a playable card

           },
           {color="White",hex="7F7F7F",UI="0dc414",Dots={"f73eb4","140320","f476b8","17f289","c9a1ab"}},
           {color="Red",hex="DA1917",UI="ded49d",Dots={"21b5d2","a4df4c","1cffbc","e13ffd","de075e"}},
           {color="Yellow",hex="E6E42B",UI="dc3aff",Dots={"ed19b2","2adab0","b29774","5dff41","327c73"}},
           {color="Green",hex="30B22A",UI="c42232",Dots={"f4e4fc","7b997f","4c68cc","223061","42edd3"}},
           {color="Blue",hex="1E87FF",UI="a506f9",Dots={"7bb674","8722e0","4ef0c4","257fd3","e08dc1"}},
           {color="Pink",hex="F46FCD",UI="423aeb",Dots={"29677c","2612c0","7c63f0","e71bd6","c12205"}}
       }
      self.createButton({
         label=self.getName(), click_function="start", function_owner=self,
         position={0,0.19,0}, rotation={0,0,0}, width=1200, height=450, font_size=300
      })
   else
      Sets = JSON.decode(save) or {
          {color="Settings",
              Running=false,
              Trot=false, --Trot = true == Counterclockwise
              PluseStack=0, --Current Stack of Pluse 2/4
              CurrentColor=0, --Color ID of Card to play on.
              CurrentNumber=0, --Number ID of Card to play on.
              LastColor=0, --Color ID of Card b4 Current / Used for chalanging Wiled+4
              LastNumber=0,--Number ID of Card b4 Current / Used for chalanging Wiled+4
              LastPlayer="White", --Last Player / Used for chalanging Wiled+4
              --Options
              PluseForLimit=true, --If true may only play a +4 if its the last option
              StackingPluse=false,--May stack +2 and +4 to keep going
              StackingAll=false,  --May also stack skip and reverse
              DrawTillGood=false, --If true Draw till you get a playable card
              ForcePlay=false,    --Prevent players from drawing if thay have a playable card

          },
          {color="White",hex="7F7F7F",UI="0dc414",Dots={"f73eb4","140320","f476b8","17f289","c9a1ab"}},
          {color="Red",hex="DA1917",UI="ded49d",Dots={"21b5d2","a4df4c","1cffbc","e13ffd","de075e"}},
          {color="Yellow",hex="E6E42B",UI="dc3aff",Dots={"ed19b2","2adab0","b29774","5dff41","327c73"}},
          {color="Green",hex="30B22A",UI="c42232",Dots={"f4e4fc","7b997f","4c68cc","223061","42edd3"}},
          {color="Blue",hex="1E87FF",UI="a506f9",Dots={"7bb674","8722e0","4ef0c4","257fd3","e08dc1"}},
          {color="Pink",hex="F46FCD",UI="423aeb",Dots={"29677c","2612c0","7c63f0","e71bd6","c12205"}}
        }
      if Sets[1].Running == false then
         self.createButton({
            label=self.getName(), click_function="start", function_owner=self,
            position={0,0.19,0}, rotation={0,0,0}, width=1200, height=450, font_size=300
         })
      else
         self.createButton({
            label="Reset", click_function="SendReset", function_owner=self,
            position={0,0.19,0}, rotation={0,0,0}, width=600, height=450, font_size=150
         })
      end
   end
   --Vars
   UNODeck = getObjectFromGUID("ce61e8")
   timerTick = 1
   display = {getObjectFromGUID("084f05"),getObjectFromGUID("c3da13")}
   RZone = getObjectFromGUID("11b50e")
   GZone = getObjectFromGUID("c28f42")
   WZone = getObjectFromGUID("d72560")
   Turn = Global.getVar("Turn")
end

function Reset()
   Sets[1].Running = false
   self.clearButtons()
   self.createButton({
      label=self.getName(), click_function="start", function_owner=self,
      position={0,0.19,0}, rotation={0,0,0}, width=1200, height=450, font_size=300
   })
   for x, set in ipairs(Sets) do
       if x ~= 1 then
           for i, dot in ipairs(set.Dots) do
               getObjectFromGUID(dot).setColorTint({0,0,0})
           end
       end
   end
   Sets = {
       {color="Settings",
           Running=false,
           Trot=false, --Trot = true == Counterclockwise
           PluseStack=0, --Current Stack of Pluse 2/4
           CurrentColor=0, --Color ID of Card to play on.
           CurrentNumber=0, --Number ID of Card to play on.
           LastColor=0, --Color ID of Card b4 Current / Used for chalanging Wiled+4
           LastNumber=0,--Number ID of Card b4 Current / Used for chalanging Wiled+4
           LastPlayer="White", --Last Player / Used for chalanging Wiled+4
           --Options
           PluseForLimit=true, --If true may only play a +4 if its the last option
           StackingPluse=false,--May stack +2 and +4 to keep going
           StackingAll=false,  --May also stack skip and reverse
           DrawTillGood=false, --If true Draw till you get a playable card
           ForcePlay=false,    --Prevent players from drawing if thay have a playable card

       },
       {color="White",hex="7F7F7F",UI="0dc414",Dots={"f73eb4","140320","f476b8","17f289","c9a1ab"}},
       {color="Red",hex="DA1917",UI="ded49d",Dots={"21b5d2","a4df4c","1cffbc","e13ffd","de075e"}},
       {color="Yellow",hex="E6E42B",UI="dc3aff",Dots={"ed19b2","2adab0","b29774","5dff41","327c73"}},
       {color="Green",hex="30B22A",UI="c42232",Dots={"f4e4fc","7b997f","4c68cc","223061","42edd3"}},
       {color="Blue",hex="1E87FF",UI="a506f9",Dots={"7bb674","8722e0","4ef0c4","257fd3","e08dc1"}},
       {color="Pink",hex="F46FCD",UI="423aeb",Dots={"29677c","2612c0","7c63f0","e71bd6","c12205"}}
   }
end
--Main Code

function start()
    Sets[1].Running = true
    for i,obj in ipairs(getAllObjects()) do
        if obj.tag == "Card" or obj.tag == "Deck" then
            obj.destruct()
        end
    end
    self.clearButtons()
    self.createButton({
        label="Reset", click_function="SendReset", function_owner=self,
        position={0,0.19,0}, rotation={0,0,0}, width=600, height=450, font_size=150
    })
    display[1].clearButtons()
    display[2].clearButtons()
    local pos = GZone.getPosition()
    local rot = GZone.getRotation()
    local deck = UNODeck.takeObject({position=pos,rotation={rot.x,rot.y,180}})
    deck.shuffle()
    --Make all the settings button and start button.
    display[2].createButton({
      label="Start Game", click_function="BegenGame", function_owner=self,
      position={4,0.25,-2}, rotation={0,270,0}, width=2400, height=450, font_size=250,
      tooltip = "Starts the game.\nDuh.",
   })
    display[2].createButton({
      label="Stacking: Off", click_function="ToggleStacking", function_owner=self,
      position={5,0.25,-2}, rotation={0,270,0}, width=2400, height=450, font_size=250,
      tooltip = "No Stacking Cards.",
   })
   display[2].createButton({
      label="Draw: One", click_function="ChangeDrawMode", function_owner=self,
      position={6,0.25,-2}, rotation={0,270,0}, width=2400, height=450, font_size=250,
      tooltip = "Players will draw only one card.",
   })
   display[2].createButton({
      label="Challenge +4: On", click_function="ToggleChallengeMode", function_owner=self,
      position={7,0.25,-2}, rotation={0,270,0}, width=2400, height=450, font_size=250,
      tooltip = "Players can be called out for playing Wild +4 cards when they are not supposed to.",
   })
   display[2].createButton({
      label="Must Play Card: Off", click_function="ForcePlay", function_owner=self,
      position={8,0.25,-2}, rotation={0,270,0}, width=2400, height=450, font_size=250,
      tooltip = "Players can pick up a card, even if they can play with their current hand.",
   })
end

function BegenGame() --Clear settings buttons, create draw button, shuffle the deack, deal cards, pick first player.
   for i,v in pairs(display) do --clear settings buttons and create draw button
      v.clearButtons()
   end
   display[1].createButton({
      label="Draw Card", click_function="DeckDeaw", function_owner=self,
      position={0,0.19,0}, rotation={0,0,0}, width=1600, height=450, font_size=300
   })
   local deck = findDeck(GZone)
   deck.shuffle()
   for i,v in pairs(getSeatedPlayers()) do
      deck.deal(7,v)
   end
   PickRandomPlayer()
   local Q
   for i, card in ipairs(reverseTable(deck.getObjects())) do
       local CardInfo = stringSplit(card.description, "%S+")
       CardInfo[1] = tonumber(CardInfo[1])
       if CardInfo[1] ~= 21 then
           Q = i
           break
       end
   end
   local FirstCard = deck.takeObject({index=Q})
   putCardInstant(FirstCard,WZone)
   local CardInfo = stringSplit(FirstCard.getDescription(), "%S+")
   CardInfo[1] = tonumber(CardInfo[1])
   CardInfo[2] = tonumber(CardInfo[2])
   Sets[1].CurrentColor = CardInfo[2]
   Sets[1].CurrentNumber= CardInfo[1]
   if CardInfo[1] == 10 then
       if Sets[1].Trot == true then
           Sets[1].Trot = false
       else
           Sets[1].Trot = true
       end
       if #getSeatedPlayers() == 2 then
           NextPlayer()
       end
    elseif CardInfo[1] == 11 then
        NextPlayer()
    elseif CardInfo[1] == 12 then
        if Sets[1].StackingPluse == false then
            deck.deal(2, Turn)
            NextPlayer()
        else
            Sets[1].PluseStack = 2
            getObjectFromGUID(findSetFromColor(Turn).UI).createButton({
                label="Can't Stack", click_function="AcceptCards", function_owner=self,
                position={0,0.19,0}, rotation={0,0,0}, width=1000, height=300, font_size=200
            })
        end
   end
   startLuaCoroutine(self, "DotUI")
end

function onObjectEnterScriptingZone(Zone,Obj,color)
	if Zone == WZone and Sets[1].Running == true then
        if not color then
            color = Obj.held_by_color
        end
		if color == nil then
			return
        elseif color == Turn then
            if Obj.tag == "Deck" then Obj.deal(Obj.getQuantity(),color) end --Can't play more then one card in UNO
            local CardInfo = stringSplit(Obj.getDescription(), "%S+")
            CardInfo[1] = tonumber(CardInfo[1])
            CardInfo[2] = tonumber(CardInfo[2])
            --10 = Reverse, 11 = Skip, 12 = +2, 20 = Wild, 21 = Wild +4

            --Dealing with Stacking
            if Sets[1].PluseStack > 0 then
                if CardInfo[1] == Sets[1].CurrentNumber or CardInfo[2] == Sets[1].CurrentColor or CardInfo[2] == 5 then
                    SetLastCard(CardInfo)
                    if Sets[1].StackingPluse == true and (CardInfo[1] == 12 or CardInfo[1] == 21) then
                        putCardInstant(Obj,WZone)
                        if CardInfo[1] == 12 then
                            Sets[1].PluseStack = Sets[1].PluseStack +2
                            NextPlayer()
                        else
                            Sets[1].PluseStack = Sets[1].PluseStack +4
                            RGBYButtons()
                        end
                    elseif Sets[1].StackingAll == true and (CardInfo[1] == 10 or CardInfo[1] == 11 or CardInfo[1] == 12 or CardInfo[1] == 20) then
                        putCardInstant(Obj,WZone)
                        if CardInfo[1] == 20 then
                            RGBYButtons()
                        elseif #getSeatedPlayers() == 2 and CardInfo[1] == 10 then
                            NextPlayer(true)
                        elseif CardInfo[1] == 10 then
                            if Sets[1].Trot == true then
                                Sets[1].Trot = false
                            else
                                Sets[1].Trot = true
                            end
                            NextPlayer()
                        elseif CardInfo[1] == 11 then
                            NextPlayer(true)
                        else
                            NextPlayer()
                        end
                    else
                        Obj.deal(1,color)
                    end
                else
                    Obj.deal(1,color)
                end
                return
            end

            --If played card matches lastplayed card.
            if CardInfo[1] == Sets[1].CurrentNumber or CardInfo[2] == Sets[1].CurrentColor or CardInfo[2] == 5 or Sets[1].CurrentColor == 5 then
                SetLastCard(CardInfo)
                local skip = false
                if CardInfo[1] == 10 then --Reverse
                    if Sets[1].Trot == true then
                        Sets[1].Trot = false
                    else
                        Sets[1].Trot = true
                    end
                    if #getSeatedPlayers() == 2 then
                        skip = true
                    end
                elseif CardInfo[1] == 11 then --skip
                    skip = true
                elseif CardInfo[1] == 12 then -- +2
                    Sets[1].PluseStack = Sets[1].PluseStack +2
                elseif CardInfo[1] == 20 then -- Wiled
                    putCardInstant(Obj,WZone)
                    RGBYButtons()
                    return --Return to let them pick next color.
                elseif CardInfo[1] == 21 then -- Wiled +4
                    putCardInstant(Obj,WZone)
                    RGBYButtons()
                    Sets[1].PluseStack = Sets[1].PluseStack +4
                    return --Return to let them pick next color.
                end
                putCardInstant(Obj,WZone)
                NextPlayer(skip)
            end
            Obj.deal(1,color)
        else --if color ~= Turn
			local count = Obj.getQuantity()
			if count == -1 then count = 1 end
			Obj.deal(count,color)
        end
    end
end

function RGBYButtons() --Create buttons to pick color for wiled.
    display[2].clearButtons()
    display[2].createButton({
        label="", click_function="PickRed", function_owner=self,
        position={-1.5,0.19,0}, rotation={0,0,0}, width=300, height=300, font_size=300,
        color=stringColorToRGB("Red")
    })
    display[2].createButton({
        label="", click_function="PickGreen", function_owner=self,
        position={-0.5,0.19,0}, rotation={0,0,0}, width=300, height=300, font_size=300,
        color=stringColorToRGB("Green")
    })
    display[2].createButton({
        label="", click_function="PickBlue", function_owner=self,
        position={0.5,0.19,0}, rotation={0,0,0}, width=300, height=300, font_size=300,
        color=stringColorToRGB("Blue")
    })
    display[2].createButton({
        label="", click_function="PickYellow", function_owner=self,
        position={1.5,0.19,0}, rotation={0,0,0}, width=300, height=300, font_size=300,
        color=stringColorToRGB("Yellow")
    })
end

function ResetDeck(color,count) --Reset deck. then deal Count cards to color.
   local deck = findDeck(WZone)
   if deck then
      deck.takeObject({
         position       = WZone.getPosition(),
         smooth         = false,
      })
      deck.setRotation({0,0,180})
      deck.setPosition(GZone.getPosition())
      deck.shuffle()
      local newdeck = findDeck(GZone)
      if count then
          newdeck.deal(count,color)
      end
   else
      log("No deck found to reset", "error", "Error: ")
   end
end

function NextPlayer(skip) --Handling changing players // Make functions for all the buttons in here
    for i,set in ipairs(Sets) do
        if set.UI then
            getObjectFromGUID(set.UI).clearButtons()
        end
    end
    Sets[1].LastPlayer = Turn
    Turn = Global.call("NextPlayer", {Sets[1].Trot})
    --If Limit +4 and No Stacking
    if Sets[1].PluseForLimit == true and Sets[1].StackingPluse == false and Sets[1].CurrentNumber == 21 and Sets[1].PluseStack > 0 then
        getObjectFromGUID(findSetFromColor(Turn).UI).createButton({
            label="Contest", click_function="Contest", function_owner=self,
            position={1,0.19,0}, rotation={0,0,0}, width=1000, height=300, font_size=200
        })
        getObjectFromGUID(findSetFromColor(Turn).UI).createButton({
            label="Accept", click_function="AcceptCards", function_owner=self,
            position={-1,0.19,0}, rotation={0,0,0}, width=1000, height=300, font_size=200
        })
    --If Limit +4 and with Stacking
    elseif Sets[1].PluseForLimit == true and Sets[1].StackingPluse == true and Sets[1].CurrentNumber == 21 and Sets[1].PluseStack > 0 then
        getObjectFromGUID(findSetFromColor(Turn).UI).createButton({
            label="Contest", click_function="Contest", function_owner=self,
            position={1,0.19,0}, rotation={0,0,0}, width=1000, height=300, font_size=200
        })
        getObjectFromGUID(findSetFromColor(Turn).UI).createButton({
            label="Can't Stack", click_function="AcceptCards", function_owner=self,
            position={-1,0.19,0}, rotation={0,0,0}, width=1000, height=300, font_size=200
        })
    --No Limit on +4 and with stacking
    elseif Sets[1].PluseForLimit == false and Sets[1].StackingPluse == true and Sets[1].PluseStack > 0 then
        if skip then NextPlayer() return end
        getObjectFromGUID(findSetFromColor(Turn).UI).createButton({
            label="Can't Stack", click_function="AcceptCards", function_owner=self,
            position={0,0.19,0}, rotation={0,0,0}, width=1000, height=300, font_size=200
        })
    --Last card was a +2/+4 and no Limit on +4 and No Stacking
    elseif Sets[1].PluseForLimit == true and Sets[1].StackingPluse == true and Sets[1].PluseStack > 0 then
        if skip then NextPlayer() return end
        getObjectFromGUID(findSetFromColor(Turn).UI).createButton({
            label="Can't Stack", click_function="AcceptCards", function_owner=self,
            position={0,0.19,0}, rotation={0,0,0}, width=1000, height=300, font_size=200
        })
    elseif Sets[1].StackingPluse == false and Sets[1].PluseStack > 0 then
        local Deck = findDeck(WZone)
        --If not enuff
        if Deck.tag == "Card" or Deck.getQuantity() < Sets[1].PluseStack then
            ResetDeck(Turn,Sets[1].PluseStack)
            Sets[1].PluseStack = 0
            NextPlayer()
        else
            Deck.deal(Sets[1].PluseStack, Turn)
            Sets[1].PluseStack = 0
            NextPlayer()
        end
    --If player was skiped
    elseif skip then
        broadcastToAll(Player[Turn].steam_name .. ": Was Skipped.", stringColorToRGB(Turn))
        NextPlayer()
    end
end

function DotUI()
    local DotI = 1
    local color = "White"
    while Sets[1].Running == true do
        for x, set in ipairs(Sets) do
            if x ~= 1 then
                for i, dot in ipairs(set.Dots) do
                    getObjectFromGUID(dot).setColorTint({0,0,0})
                end
            end
        end
        if Sets[1].CurrentColor == 1 then
            color = "Blue"
        elseif Sets[1].CurrentColor == 2 then
            color = "Red"
        elseif Sets[1].CurrentColor == 3 then
            color = "Yellow"
        elseif Sets[1].CurrentColor == 4 then
            color = "Green"
        elseif Sets[1].CurrentColor == 5 then
            color = "White"
        end
        local set = findSetFromColor(Turn)
        for i,Dot in ipairs(set.Dots) do
            if i ~= DotI then
                getObjectFromGUID(Dot).setColorTint(stringColorToRGB(color))
            end
        end
        if Sets[1].Trot == false then
            DotI = DotI + 1
        else
            DotI = DotI - 1
        end
        if DotI <= 0 then
            DotI = 5
        end
        if DotI >= 6 then
            DotI = 1
        end
        waitFrames(10)
    end
    return 1
end

function SetLastCard(CardInfo) --Table {Card Number, Card Color}
    Sets[1].LastColor = Sets[1].CurrentColor
    Sets[1].LastNumber = Sets[1].CurrentNumber
    Sets[1].CurrentColor = CardInfo[2]
    Sets[1].CurrentNumber = CardInfo[1]
end

function DDeckDeaw(tbl) DeckDeaw(o,tbl[1]) end
function DeckDeaw(o,color) --DrawDiscard Button // Make fancy L8r (Make it play the working card)
    if color == Turn then
        local Deck = findDeck(GZone)
        if Deck == false or Deck.tag == "Card" then
            ResetDeck()
        end
        local pos = WZone.getPosition()
        local rot = WZone.getRotation()
        --Check to see if the player has a card thay can play.
        if Sets[1].ForcePlay == true then
            if CheckHand(color) == true then
                broadcastToColor("You have a card you can play.", color, stringColorToRGB("Red"))
                return
            end
        end
        if Sets[1].PluseStack > 0 then
            return
        end

        if Sets[1].DrawTillGood == true then
            for i,card in ipairs(Deck.getObjects()) do
                local CardInfo = stringSplit(card.description, "%S+")
                CardInfo[1] = tonumber(CardInfo[1])
                CardInfo[2] = tonumber(CardInfo[2])
                if CardInfo[1] == Sets[1].CurrentNumber or CardInfo[2] == Sets[1].CurrentColor or CardInfo[2] == 5 then
                    if i-1 > 0 then
                       Deck.deal(i-1, color)
                   end
                   delayedCallback("PlayCardFromDeck",{color},0.1)
                   return
                end
            end
            --Cant find card in deck so Deal all card and reset deck and tryagen.
            Deck.deal(Deck.getQuantity(), color)
            ResetDeck()
            delayedCallback("DDeckDeaw",{color},1)
            return
        else --DrawTillGood == false
            local CardInfo = stringSplit(Deck.getObjects()[1].description, "%S+")
            CardInfo[1] = tonumber(CardInfo[1])
            CardInfo[2] = tonumber(CardInfo[2])
            if CardInfo[1] == Sets[1].CurrentNumber or CardInfo[2] == Sets[1].CurrentColor or CardInfo[2] == 5 then
                local card = Deck.takeObject({position = WZone.getPosition(),smooth = false})
                onObjectEnterScriptingZone(WZone,card,color)
            else
                Deck.deal(1, color)
                NextPlayer()
            end
        end
    end
end

function PlayCardFromDeck(tbl)
    local Deck = findDeck(GZone)
    local card = Deck.takeObject({index=i,position = WZone.getPosition(),smooth = false})
    onObjectEnterScriptingZone(WZone,card,tbl[1])
end

function CheckHand(color,Last) --If Last == true then Compare with Last insted of Current
    for i,card in ipairs(Player[color].getHandObjects()) do
        local CardInfo = stringSplit(card.getDescription(), "%S+")
        CardInfo[1] = tonumber(CardInfo[1])
        CardInfo[2] = tonumber(CardInfo[2])
        if Last then
            if CardInfo[1] == Sets[1].LastNumber or CardInfo[2] == Sets[1].LastColor or CardInfo[2] == 5 then
                return true
            end
        else
            if CardInfo[1] == Sets[1].CurrentNumber or CardInfo[2] == Sets[1].CurrentColor or CardInfo[2] == 5 then
                return true
            end
        end
    end
    return false
end


--Button functions

function ToggleChallengeMode(o,c)
    if Sets[1].PluseForLimit == true then
        Sets[1].PluseForLimit = false
        display[2].editButton({index=3,label="Challenge +4: Off",tooltip="Players can play Wild +4 cards whenever."})
    else
        Sets[1].PluseForLimit = true
        display[2].editButton({index=3,label="Challenge +4: On",tooltip="Players can be called out for playing Wild +4 cards when they are not supposed to."})
    end
end

function ForcePlay(o,c)
    if Sets[1].ForcePlay == true then
        Sets[1].ForcePlay = false
        display[2].editButton({index=4,label="Must Play Card: Off",tooltip="Players can pick up a card, even if they can play with their current hand."})
    else
        Sets[1].ForcePlay = true
        display[2].editButton({index=4,label="Must Play Card: On",tooltip="Players must play any playable cards before picking up a card."})
    end
end

function ChangeDrawMode(o,c)
   if Sets[1].DrawTillGood == true then
       Sets[1].DrawTillGood = false
       display[2].editButton({index=2,label="Draw: One",tooltip="Players will draw only one card."})
   else
       Sets[1].DrawTillGood = true
       display[2].editButton({index=2,label="Draw: Until Playable",tooltip="Players will automatically draw until they have a playable card."})
   end
end

function ToggleStacking(o,c)
    if Sets[1].StackingPluse == true and Sets[1].StackingAll == true then
        display[2].editButton({index=1,label="Stacking: Off",tooltip="No Stacking Cards."})
        Sets[1].StackingPluse = false
        Sets[1].StackingAll = false
    elseif Sets[1].StackingPluse == true and Sets[1].StackingAll == false then
        display[2].editButton({index=1,label="Stacking: All",tooltip="Can Stack +2, Wiled +4, Skip, and Reverse"})
        Sets[1].StackingPluse = true
        Sets[1].StackingAll = true
    elseif Sets[1].StackingPluse == false and Sets[1].StackingAll == false then
        display[2].editButton({index=1,label="Stacking: Only +2/+4",tooltip="Can Only Stack +2 and Wiled +4"})
        Sets[1].StackingPluse = true
        Sets[1].StackingAll = false
    end
end

function PickRed(o,color)
    if color == Turn then
        Sets[1].CurrentColor = 2
        display[2].clearButtons()
        broadcastToAll("Color is Red", stringColorToRGB("Red"))
        NextPlayer()
    end
end
function PickGreen(o,color)
    if color == Turn then
        Sets[1].CurrentColor = 4
        display[2].clearButtons()
        broadcastToAll("Color is Green", stringColorToRGB("Green"))
        NextPlayer()
    end
end
function PickBlue(o,color)
    if color == Turn then
        Sets[1].CurrentColor = 1
        display[2].clearButtons()
        broadcastToAll("Color is Blue", stringColorToRGB("Blue"))
        NextPlayer()
    end
end
function PickYellow(o,color)
    if color == Turn then
        Sets[1].CurrentColor = 3
        display[2].clearButtons()
        broadcastToAll("Color is Yellow", stringColorToRGB("Yellow"))
        NextPlayer()
    end
end

function AAcceptCards(tbl) AcceptCards(o,tbl[1]) end
function AcceptCards(o,color)
    if color == Turn then
        if Sets[1].PluseStack > 0 then
            local Deck = findDeck(GZone)
            if Deck.tag == "Card" or Deck.getQuantity() < Sets[1].PluseStack then
                ResetDeck()
                delayedCallback("AAcceptCards",{color},0.1)
                return
            else
                Deck.deal(Sets[1].PluseStack, color)
                Sets[1].PluseStack = 0
            end
        end
        getObjectFromGUID(findSetFromColor(Turn).UI).clearButtons()
        NextPlayer()
    end
end

function CContest(tbl) Contest(o,tbl[1]) end
function Contest(o,color)
    if color == Turn then
        local Deck = findDeck(GZone)
        if Deck.tag == "Card" or Deck.getQuantity() < (Sets[1].PluseStack +2) then
            ResetDeck()
            delayedCallback("CContest",{color},0.1)
            return
        else
            if CheckHand(Sets[1].LastPlayer,true) == true then
                Deck.deal(Sets[1].PluseStack, Sets[1].LastPlayer)
            else
               Deck.deal((Sets[1].PluseStack + 2), color)
               NextPlayer()
            end
            Sets[1].PluseStack = 0
        end
        getObjectFromGUID(findSetFromColor(Turn).UI).clearButtons()
    end
end

--Tools
function findSetFromColor(color)
    for i,set in ipairs(Sets) do
        if color == set.color then
            return set
        end
    end
    return false
end
function putCardInstant(obj,zone,flip) --checks if deck exsists and puts it ontop of deck, otherwise sets it to a constant y vale.
    local rot
    if flip == true then
        rot = {0,0,0}
    else
        rot = {0,180,0}
    end
   local pos = zone.getPosition()
   local deck = findDeck(zone)
   if deck then
      obj.setPosition({pos.x,deck.getBounds().size.y+deck.getPosition().y,pos.z})
   else
      obj.setPosition({pos.x,1.03,pos.z})
   end
   obj.setRotation(rot)
   obj.reload() --force player to drop card
end
function findDeck(zone)
   if zone.getObjects() then
      for i, obj in ipairs(zone.getObjects()) do
         if obj.tag == "Deck" then
            return obj
         end
      end
      for i, obj in ipairs(zone.getObjects()) do
         if obj.tag == "Card" then
            return obj
         end
      end
   end
   return false
end
function delayedCallback(fname,params,delay)
    timerTick = timerTick + 1
    params.id = (self.getName() .. timerTick)
    Timer.create({identifier=params.id,function_owner=self, function_name=fname, parameters=params, delay=delay})
    return params.id
end
function stringSplit(s, pattern)
    local t = {}
    for i in string.gmatch(s, pattern) do
        table.insert(t, i)
    end
    return t
end
function waitFrames(frames)
    while frames > 0 do
    coroutine.yield(0)
    frames = frames - 1
    end
end
function reverseTable(table)
	local length = #table
	local reverse = {}
	for i, v in ipairs(table) do
		reverse[length + 1 - i] = v
	end
	return reverse
end
function rotateLocalCoordinates(desiredPos,color)
    local objPos, objRot = Player[color].getHandTransform().position, Player[color].getHandTransform().rotation
    local angle = -math.rad(objRot.y)
	local x = desiredPos[1] * math.cos(angle) - desiredPos[3] * math.sin(angle)
	local z = desiredPos[1] * math.sin(angle) + desiredPos[3] * math.cos(angle)
	return {objPos.x+x, objPos.y+desiredPos[2], objPos.z+z} --Baced on handzones
end
function PickRandomPlayer()
	local players = getSeatedPlayers()
	Turn = Global.call("SetTurn",{players[math.random(1,#players)]})
end
